# deployments/kubernetes/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: taskmaster
  labels:
    name: taskmaster

---
# deployments/kubernetes/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: taskmaster-config
  namespace: taskmaster
data:
  APP_ENV: "production"
  DATABASE_HOST: "postgres-service"
  DATABASE_PORT: "5432"
  DATABASE_NAME: "taskmaster"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  LOG_LEVEL: "info"
  LOG_FORMAT: "json"
  ENABLE_METRICS: "true"
  METRICS_PORT: "9090"
  CORS_ALLOWED_ORIGINS: "https://taskmaster.yourdomain.com"
  RATE_LIMIT_REQUESTS: "100"
  RATE_LIMIT_WINDOW: "1m"

---
# deployments/kubernetes/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: taskmaster-secrets
  namespace: taskmaster
type: Opaque
data:
  # These should be base64 encoded
  # echo -n 'your-actual-secret' | base64
  DATABASE_USER: cG9zdGdyZXM= # postgres
  DATABASE_PASSWORD: cG9zdGdyZXM= # postgres
  JWT_SECRET: eW91ci1zdXBlci1zZWNyZXQtand0LWtleQ== # your-super-secret-jwt-key
  REDIS_PASSWORD: ""

---
# deployments/kubernetes/postgres.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: taskmaster
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: taskmaster
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: taskmaster
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: taskmaster-secrets
              key: DATABASE_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: taskmaster-secrets
              key: DATABASE_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: 256Mi
            cpu: 250m
          limits:
            memory: 1Gi
            cpu: 500m
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - taskmaster
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - taskmaster
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: taskmaster
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# deployments/kubernetes/redis.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: taskmaster
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: taskmaster
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: 128Mi
            cpu: 100m
          limits:
            memory: 512Mi
            cpu: 250m
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: taskmaster
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# deployments/kubernetes/taskmaster-api.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: taskmaster-api
  namespace: taskmaster
  labels:
    app: taskmaster-api
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: taskmaster-api
      version: v1
  template:
    metadata:
      labels:
        app: taskmaster-api
        version: v1
    spec:
      containers:
      - name: api
        image: taskmaster/core:v1.0.0
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: APP_PORT
          value: "8080"
        envFrom:
        - configMapRef:
            name: taskmaster-config
        - secretRef:
            name: taskmaster-secrets
        resources:
          requests:
            memory: 256Mi
            cpu: 250m
          limits:
            memory: 512Mi
            cpu: 500m
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: uploads
          mountPath: /app/uploads
      volumes:
      - name: uploads
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: taskmaster-api-service
  namespace: taskmaster
  labels:
    app: taskmaster-api
spec:
  selector:
    app: taskmaster-api
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  type: ClusterIP

---
# deployments/kubernetes/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: taskmaster-api-hpa
  namespace: taskmaster
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: taskmaster-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60

---
# deployments/kubernetes/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: taskmaster-ingress
  namespace: taskmaster
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://taskmaster.yourdomain.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type, X-Tenant-ID"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.taskmaster.yourdomain.com
    secretName: taskmaster-tls
  rules:
  - host: api.taskmaster.yourdomain.com
    http:
      paths:
      - path: /(.*)
        pathType: Prefix
        backend:
          service:
            name: taskmaster-api-service
            port:
              number: 80

---
# deployments/kubernetes/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: taskmaster-api-metrics
  namespace: taskmaster
  labels:
    app: taskmaster-api
spec:
  selector:
    matchLabels:
      app: taskmaster-api
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s

---
# deployments/kubernetes/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: taskmaster-network-policy
  namespace: taskmaster
spec:
  podSelector:
    matchLabels:
      app: taskmaster-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
# deployments/kubernetes/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: taskmaster-cleanup
  namespace: taskmaster
spec:
  schedule: "0 2 * * *" # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: cleanup
            image: taskmaster/core:v1.0.0
            command:
            - ./taskmaster
            - cleanup
            - --expired-tokens
            - --old-logs
            envFrom:
            - configMapRef:
                name: taskmaster-config
            - secretRef:
                name: taskmaster-secrets
            resources:
              requests:
                memory: 128Mi
                cpu: 100m
              limits:
                memory: 256Mi
                cpu: 200m

---
# deployments/kubernetes/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: taskmaster-api-pdb
  namespace: taskmaster
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: taskmaster-api