# Dockerfile
FROM golang:1.21-alpine AS builder

# Install dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o taskmaster cmd/api/main.go

# Final stage
FROM alpine:latest

# Install ca-certificates for HTTPS calls
RUN apk --no-cache add ca-certificates tzdata

# Create app user
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

WORKDIR /root/

# Copy binary from builder
COPY --from=builder /app/taskmaster .
COPY --from=builder /app/migrations ./migrations

# Change ownership
RUN chown -R appuser:appgroup /root
USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Run the application
CMD ["./taskmaster", "serve"]

# =============================================================================
# docker-compose.yml
version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: taskmaster
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - taskmaster-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d taskmaster"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - taskmaster-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # TaskMaster API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      # Database
      DATABASE_HOST: db
      DATABASE_PORT: 5432
      DATABASE_NAME: taskmaster
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_SSL_MODE: disable

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0

      # Application
      APP_ENV: development
      APP_PORT: 8080
      JWT_SECRET: your-super-secret-jwt-key-for-development
      JWT_EXPIRES_IN: 24h

      # Logging
      LOG_LEVEL: info
      LOG_FORMAT: json

      # Security
      CORS_ALLOWED_ORIGINS: "http://localhost:3000,http://localhost:8080"
      RATE_LIMIT_REQUESTS: 100
      RATE_LIMIT_WINDOW: 1m

      # Metrics
      ENABLE_METRICS: "true"
      METRICS_PORT: 9090
    ports:
      - "8080:8080"
      - "9090:9090"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - taskmaster-network
    volumes:
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus for Metrics (Optional)
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - taskmaster-network
    profiles:
      - monitoring

  # Grafana for Dashboards (Optional)
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    networks:
      - taskmaster-network
    profiles:
      - monitoring

  # Nginx for Load Balancing (Optional)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    networks:
      - taskmaster-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  taskmaster-network:
    driver: bridge

# =============================================================================
# docker-compose.prod.yml
version: '3.8'

services:
  # Production Database with backup
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: taskmaster
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - taskmaster-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d taskmaster"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Production Redis with persistence
  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - taskmaster-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Production API with multiple replicas
  api:
    image: taskmaster/core:latest
    restart: always
    environment:
      APP_ENV: production
      DATABASE_HOST: db
      REDIS_HOST: redis
      JWT_SECRET: ${JWT_SECRET}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - taskmaster-network
    depends_on:
      db:
        condition: service_healthy
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Production Load Balancer
  nginx:
    image: nginx:alpine
    restart: always
    volumes:
      - ./nginx/prod.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    networks:
      - taskmaster-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  taskmaster-network:
    driver: overlay
    attachable: true

# =============================================================================
# docker-compose.test.yml
version: '3.8'

services:
  # Test Database
  test-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: taskmaster_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    tmpfs:
      - /var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d taskmaster_test"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Test Redis
  test-redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    tmpfs:
      - /data

  # Test Runner
  test:
    build:
      context: .
      dockerfile: Dockerfile.test
    environment:
      DATABASE_HOST: test-db
      DATABASE_PORT: 5432
      DATABASE_NAME: taskmaster_test
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      REDIS_HOST: test-redis
      REDIS_PORT: 6379
      APP_ENV: test
      JWT_SECRET: test-secret
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_started
    volumes:
      - .:/app
      - /app/vendor
    working_dir: /app
    command: go test -v ./...

# =============================================================================
# Dockerfile.test
FROM golang:1.21-alpine

# Install dependencies
RUN apk add --no-cache git ca-certificates tzdata make

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Install testing tools
RUN go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
RUN go install github.com/onsi/ginkgo/v2/ginkgo@latest

# Copy source code
COPY . .

# Default command
CMD ["go", "test", "-v", "./..."]